// 1937년 Collatz란 사람에 의해 제기된 이 추측은, 주어진 수가 1이 될때까지 다음 작업을 반복하면, 모든 수를 1로 만들 수 있다는 추측입니다. 작업은 다음과 같습니다.

// 1-1. 입력된 수가 짝수라면 2로 나눕니다. 
// 1-2. 입력된 수가 홀수라면 3을 곱하고 1을 더합니다.
// 2. 결과로 나온 수에 같은 작업을 1이 될 때까지 반복합니다.
// 예를 들어, 입력된 수가 6이라면 6→3→10→5→16→8→4→2→1 이 되어 총 8번 만에 1이 됩니다. 위 작업을 몇 번이나 반복해야하는지 반환하는 함수, solution을 완성해 주세요. 단, 작업을 500번을 반복해도 1이 되지 않는다면 –1을 반환해 주세요.

// 제한 사항
// 입력된 수, num은 1 이상 8000000 미만인 정수입니다.

//num = 짝수, 홀수 경우를 if로 나눈다.
//연산을 수행할 때 마다 answer 변수에 1을 더하고, counr가 500이 되도 num 이 1이 되지 않으면 -1을 반환
//1은 2로 나누면 무조건 1이므로 홀수인지 판별하기 전 1인지 확인할 필요가 있다.
//500번 수행해서 num이 1이 되지 않는 경우 for 문이 끝나며, 이때는 -1을 리턴해야한다.
//answer가 엄청 큰 수인 경우도 고려해야 하지만, 테스트 케이스엔 없었나보다.
//1로 만들 수 있다는 의미는 언젠간 2의 n승이 된다는 의미와도 같다.
//
function solution(num) {
    let answer = 0;
    
    for(let i = 1; i <= 500;i++){
        if(num % 2 === 0){
            num = num/2;
            answer = answer + 1;
        }else if(num === 1){
            return answer;
        }else if(num % 2 === 1){
            num = num*3 +1;
            answer = answer + 1;
        }
    }
    return -1;    
}